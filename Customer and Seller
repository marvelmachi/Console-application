#include <iostream>
#include <vector>
#include <string>
#include <map>
using namespace std;

// User class
class User {
public:
    string username;
    string password;
    string role; // "buyer" or "seller"

    User(string u, string p, string r) {
        username = u;
        password = p;
        role = r;
    }
};

// Item class
class Item {
public:
    int id;
    string name;
    int quantity;
    float price;

    Item(int id, string n, int q, float p) {
        this->id = id;
        name = n;
        quantity = q;
        price = p;
    }
};

// Cart item class
class CartItem {
public:
    int itemId;
    int quantity;

    CartItem(int id, int q) {
        itemId = id;
        quantity = q;
    }
};

// Global variables
vector<User> users;
vector<Item> inventory;
map<string, vector<CartItem>> cartMap;

// Function to check if username exists
bool isUsernameTaken(string uname) {
    for (auto &u : users)
        if (u.username == uname)
            return true;
    return false;
}

// Register a new user
void registerUser() {
    string uname, pass, role;
    cout << "Enter Username: ";
    cin >> uname;
    if (isUsernameTaken(uname)) {
        cout << "Username already exists!\n";
        return;
    }
    cout << "Enter Password: ";
    cin >> pass;
    cout << "Role (buyer/seller): ";
    cin >> role;
    users.push_back(User(uname, pass, role));
    cout << "Registered successfully!\n";
}

// Login existing user
User* loginUser() {
    string uname, pass;
    cout << "Enter Username: ";
    cin >> uname;
    cout << "Enter Password: ";
    cin >> pass;
    for (auto &u : users) {
        if (u.username == uname && u.password == pass) {
            cout << "Welcome " << uname << "!\n";
            return &u;
        }
    }
    cout << "Invalid credentials!\n";
    return nullptr;
}

// Seller menu
void sellerPortal(User* seller) {
    while (true) {
        cout << "\n--- Seller Dashboard ---\n";
        cout << "1. Add Item\n2. Update Item\n3. View Inventory\n4. Logout\n";
        int ch;
        cin >> ch;

        if (ch == 1) {
            int id, qty;
            float price;
            string name;
            cout << "Enter Item ID: ";
            cin >> id;
            cout << "Enter Item Name: ";
            cin.ignore();
            getline(cin, name);
            cout << "Enter Quantity: ";
            cin >> qty;
            cout << "Enter Price: ";
            cin >> price;
            inventory.push_back(Item(id, name, qty, price));
            cout << "Item Added!\n";
        } else if (ch == 2) {
            int id;
            cout << "Enter Item ID to update: ";
            cin >> id;
            bool found = false;
            for (auto &i : inventory) {
                if (i.id == id) {
                    cout << "Enter New Quantity: ";
                    cin >> i.quantity;
                    cout << "Enter New Price: ";
                    cin >> i.price;
                    cout << "Item Updated!\n";
                    found = true;
                    break;
                }
            }
            if (!found) cout << "Item not found!\n";
        } else if (ch == 3) {
            cout << "\n--- Inventory ---\n";
            for (auto &i : inventory) {
                cout << "ID: " << i.id << ", Name: " << i.name
                     << ", Qty: " << i.quantity << ", Price: Rs." << i.price << "\n";
            }
        } else if (ch == 4) {
            cout << "Logging out...\n";
            break;
        } else {
            cout << "Invalid option!\n";
        }
    }
}

// Buyer menu
void buyerPortal(User* buyer) {
    while (true) {
        cout << "\n--- Buyer Dashboard ---\n";
        cout << "1. View Items\n2. Add to Cart\n3. View Cart\n4. Make Payment\n5. Logout\n";
        int ch;
        cin >> ch;

        if (ch == 1) {
            cout << "\n--- Items Available ---\n";
            for (auto &i : inventory) {
                cout << "ID: " << i.id << ", Name: " << i.name
                     << ", Qty: " << i.quantity << ", Price: Rs." << i.price << "\n";
            }
        } else if (ch == 2) {
            int id, qty;
            cout << "Enter Item ID to add: ";
            cin >> id;
            cout << "Enter Quantity: ";
            cin >> qty;
            bool found = false;
            for (auto &i : inventory) {
                if (i.id == id) {
                    if (qty > i.quantity) {
                        cout << "Not enough stock!\n";
                        return;
                    }
                    cartMap[buyer->username].push_back(CartItem(id, qty));
                    cout << "Item added to cart.\n";
                    found = true;
                    break;
                }
            }
            if (!found) cout << "Item not found!\n";
        } else if (ch == 3) {
            float total = 0;
            cout << "\n--- Cart ---\n";
            for (auto &c : cartMap[buyer->username]) {
                for (auto &i : inventory) {
                    if (i.id == c.itemId) {
                        float cost = i.price * c.quantity;
                        cout << i.name << " x " << c.quantity << " = Rs." << cost << "\n";
                        total += cost;
                    }
                }
            }
            cout << "Total Amount: Rs." << total << "\n";
        } else if (ch == 4) {
            bool success = true;
            for (auto &c : cartMap[buyer->username]) {
                for (auto &i : inventory) {
                    if (i.id == c.itemId) {
                        if (i.quantity < c.quantity) {
                            cout << "Item " << i.name << " out of stock!\n";
                            success = false;
                            break;
                        }
                    }
                }
                if (!success) break;
            }

            if (success) {
                for (auto &c : cartMap[buyer->username]) {
                    for (auto &i : inventory) {
                        if (i.id == c.itemId) {
                            i.quantity -= c.quantity;
                        }
                    }
                }
                cartMap[buyer->username].clear();
                cout << "Payment successful. Order placed!\n";
            }
        } else if (ch == 5) {
            cout << "Logging out...\n";
            break;
        } else {
            cout << "Invalid option!\n";
        }
    }
}

// Main function
int main() {
    while (true) {
        cout << "\n====== S
